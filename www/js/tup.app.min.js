
var tupModule = angular.module('tup', [ 'ionic','LocalStorageModule', 'ngLocale', 'uiGmapgoogle-maps', 'slugifier', 'ngIOS9UIWebViewPatch' ]);

tupModule.run( function( $ionicPlatform, $timeout, $ionicHistory, $state, localStorageService ) {
	imageObj 	= new Image();
	images 		= new Array();
	images[0] 	= './img/splashscreen/TUP_SPLASHscreen5.jpg';
	images[1]	= './img/splashscreen/nuage1.png';
	images[2]	= './img/splashscreen/nuage2.png';
	images[3]	= './img/splashscreen/splash_footer.png';
	images[4]	= './img/splashscreen/main1.svg';
	images[5]	= './img/splashscreen/main2.svg';
	images[6]	= './img/splashscreen/main3.svg';
	images[7]	= './img/splashscreen/main4.svg';
	images[8]	= './img/splashscreen/main5.svg';
	images[9]	= './img/splashscreen/main6.svg';
	images[10]	= './img/splashscreen/TUP_title.svg';
	
	for( var i = 0; i < images.length; i++ ) 
	 {
		  imageObj.src=images[i];
	 }
	 
	$ionicPlatform.ready(function() {
		// Remove depreciate cache
		localStorageService.remove( 'displayPlacespreservatif', 'displayPlacesdepistage', 'placespreservatif', 'placesdepistage', 'newPoi', 'addrCache', 'events' );
		
		// const prefersDark = window.matchMedia('(prefers-color-scheme: light)');
		// document.body.classList.toggle('light', prefersDark.matches);
		document.body.classList.toggle('light', true);


		const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
		if(prefersDark.matches){
			//console.log("temp temp");
			$('body').removeClass("light");
			document.body.classList.toggle('dark', prefersDark.matches);
		}
		prefersDark.addListener(mediaQuery => function(mediaQuery){
			if(mediaQuery.matches){
				$('body').removeClass("light");
			document.body.classList.toggle('dark', mediaQuery.matches);
			}
			else {
				$('body').removeClass("dark");
			document.body.classList.toggle('light', mediaQuery.matches);
			}
		});
		//console.log(prefersDark);
			
		if( typeof analytics !== 'undefined' ){
			analytics.startTrackerWithId( 'UA-69205332-1' );
			analytics.trackView( 'Splashscreen' );
		} else
			console.log("Google Analytics plugin could not be loaded.");

		// Hide animate splash and show home
		if( ionic.Platform.isAndroid() ) {
			$timeout( function() {
				if( navigator.splashscreen )
					navigator.splashscreen.hide();
				
			}, 2000).then( function() {
				$timeout( function() {
					
					$ionicHistory.nextViewOptions({
						disableAnimate: true
					});

					$state.go( 'app.home' );
				}, 4000);
			} );
		} else {
			$timeout( function() {
				if( navigator.splashscreen )
					navigator.splashscreen.hide();
				
			}, 500).then( function() {
				$timeout( function() {
					
					$ionicHistory.nextViewOptions({
						disableAnimate: true
					});

					$state.go( 'app.home' );
				}, 4000);
			} );
		}
	});
});

tupModule.config( function( $stateProvider, $urlRouterProvider, uiGmapGoogleMapApiProvider, localStorageServiceProvider, $ionicConfigProvider) {
	$ionicConfigProvider.views.swipeBackEnabled(false);
	
	$stateProvider
	
	.state('splash', {
		url: '/splash',
		templateUrl: 'templates/splashscreen.html'})
		
	.state('app', {
		abstract: true,
		url: '/app',
		templateUrl: 'templates/main.html'})
		
	.state('app.home', {
		url: '/home',
		templateUrl: 'templates/home.html'})
		
	.state('app.map', {
		url: '/map/:type',
		templateUrl: 'templates/map.html'})
		
	.state('app.map_id', {
		url: '/map/:type/:id',
		templateUrl: 'templates/map.html'})
		
	.state('app.poi', {
		url: '/poi/:id/:type',
		templateUrl: 'templates/detail_poi.html'})
	
	.state( 'app.signal_poi', {
		url: '/signal_poi/:id/:type',
		templateUrl: 'templates/signal_poi.html'})
		
	.state( 'app.signal_poi_confirm', {
		url: '/signal_poi_confirm/:type',
		templateUrl: 'templates/signal_poi_confirm.html'})
		
	.state( 'app.add_poi', {
		url: '/add_poi',
		templateUrl: 'templates/add_poi.html'})
		
	.state( 'app.add_poi_validation', {
		url: '/add_poi_validation',
		templateUrl: 'templates/add_poi_validation.html'})
		
	.state( 'app.add_poi_confirmation', {
		url: '/add_poi_confirmation',
		templateUrl: 'templates/add_poi_confirmation.html'})
		
	.state('app.agenda', {
		url: '/agenda',
		templateUrl: 'templates/agenda.html'})
		
	.state('app.fiches', {
		url: '/fiches',
		templateUrl: 'templates/fiches.html'})
		
	.state('app.fiches_id', {
		url: '/fiches/:id/:cat',
		templateUrl: 'templates/fiches.html'})
		
	.state('app.agenda_id', {
		url: '/agenda/:id',
		templateUrl: 'templates/agenda.html'})
		
		.state('app.apropos', {
		url: '/apropos',
		templateUrl: 'templates/apropos.html'})
		
	.state('app.agir_apres_un_risque', {
		url: '/agir_apres_un_risque',
		templateUrl: 'templates/agir_apres_un_risque.html'});

	// Default routing
	$urlRouterProvider.otherwise('splash');
  
	// GoogleMap
	uiGmapGoogleMapApiProvider.configure({
        key: "AIzaSyD1I39bqn0AM7p6fMcMl0g3k71X6Y6sM64",  
		v: '3', //defaults to latest 3.X anyhow
		libraries: 'weather,geometry,visualization'
	});

	// LocalService
	localStorageServiceProvider.setPrefix('tupObject');

});

tupModule.controller( 'addPoiContoller', function( $scope, $rootScope, Slug, $ionicScrollDelegate, localStorageService, globalFunctionService, $state, $ionicHistory, $timeout ) {
	localStorageService.remove( 'newPoi' );

	$scope.basedHtml = {
		nbTable 		: new Array( 7 ),
		displayTable 	: 1,
		showTable 		: [ true, false, false, false, false, false, false ],
		daySelected 	: { 
			L 	: 'no',
			M	: 'no',
			Me 	: 'no',
			J	: 'no',
			V 	: 'no',
			S 	: 'no',
			D	: 'no'
		},
		timeValues : [
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null },
			{ horaire1 : null, horaire2 : null, horaire3 : null, horaire4 : null }
		]
	};

	var isHideTabs = false;
	$scope.selectDay = function( day, index ) {
		if( $scope.basedHtml.daySelected[ day ] == 'no' )
			$scope.basedHtml.daySelected[ day ] = index;
		else
			$scope.basedHtml.daySelected[ day ] = 'no';
		
		// Display on new tab
		if( $scope.basedHtml.displayTable == ( index + 1 ) && $scope.basedHtml.displayTable != 7 && !$scope.basedHtml.showTable[ index + 1 ] ) {
			$scope.basedHtml.displayTable += 1;
		}
		
		// Hide tab without day btn if all day was selected
		if( $scope.basedHtml.daySelected.L != 'no' && $scope.basedHtml.daySelected.M != 'no' && $scope.basedHtml.daySelected.Me != 'no' && $scope.basedHtml.daySelected.J != 'no' && $scope.basedHtml.daySelected.V != 'no' && $scope.basedHtml.daySelected.S != 'no' && $scope.basedHtml.daySelected.D != 'no' ) {
			var newShowTable = [ false, false, false, false, false, false, false ];
			newShowTable[ $scope.basedHtml.daySelected.L ] = true;
			newShowTable[ $scope.basedHtml.daySelected.M ] = true;
			newShowTable[ $scope.basedHtml.daySelected.Me ] = true;
			newShowTable[ $scope.basedHtml.daySelected.J ] = true;
			newShowTable[ $scope.basedHtml.daySelected.V ] = true;
			newShowTable[ $scope.basedHtml.daySelected.S ] = true;
			newShowTable[ $scope.basedHtml.daySelected.D ] = true;
			
			$scope.basedHtml.showTable = newShowTable;
		} else if( $scope.basedHtml.daySelected.L == 'no' && $scope.basedHtml.daySelected.M == 'no' && $scope.basedHtml.daySelected.Me == 'no' && $scope.basedHtml.daySelected.J == 'no' && $scope.basedHtml.daySelected.V == 'no' && $scope.basedHtml.daySelected.S == 'no' && $scope.basedHtml.daySelected.D == 'no' ) {
			for( var i = 1; i < $scope.basedHtml.displayTable; i++ ) {
				$scope.basedHtml.showTable[ i ] = false;
			}
		}else {
			for( var i = 0; i < $scope.basedHtml.displayTable; i++ ) {
				$scope.basedHtml.showTable[ i ] = true;
			}
		}
		
		$timeout( function() {
			$ionicScrollDelegate.resize();
		}, 0);
	};
	
	var cacheAddr 		= localStorageService.get( 'addrCache' );
	var cacheAdresse1 	= '';
	var cacheCodePostal = '';
	var cacheVille 		= '';
	if( cacheAddr ) {
		cacheAddr 		= cacheAddr.split( '||' );
		cacheAdresse1 	= ( cacheAddr[0] ) ? cacheAddr[0] : '';
		cacheCodePostal = ( cacheAddr[2] ) ? parseInt( cacheAddr[2] ) : '';
		cacheVille 		= ( cacheAddr[1] ) ? cacheAddr[1] : '';
		
		localStorageService.remove( 'addrCache' );
	}
	
	$scope.lieu = {
		nom 		: '',
		type 		: '',
		typeless 	: '',
		adresse1 	: cacheAdresse1,
		adresse2 	: '',
		codePostal 	: cacheCodePostal,
		ville 		: cacheVille,
		telephone 	: '',
		ouvertureAnnee : false,
		ouverturePartieAnnee : false, 
		preservatifFeminin :  false,  
		preservatifGratuit :  false,
		horaires 	: [
			{ jour : 'Lundi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Mardi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Mercredi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Jeudi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Vendredi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Samedi', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' },
			{ jour : 'Dimanche', horaire1 : '', horaire2 : '', horaire3 : '', horaire4 : '', ferme : '0' }
		]
	};

	
	$scope.setType = function( lieu ) {
		$scope.lieu.type 		= lieu;
		$scope.lieu.typeless 	= Slug.slugify( lieu );
		$timeout( function() {
			$ionicScrollDelegate.resize();
		}, 0);
	};
	
	$scope.validLieu = function() {	
		if( !$scope.lieu.type || !$scope.lieu.adresse1 || !$scope.lieu.codePostal || !$scope.lieu.ville )
		{
			$scope.isError = true;
			$rootScope.openLoading('<p class="fw_b">Vous devez renseigner tous les champs obligatoires pour soumettre un nouveau lieu.</p><button class="button button-full button-royal bround_5px" ng-click="closeLoading()" style="margin-top: 25px;">OK</button>');
			
			if( typeof analytics !== 'undefined' )
				analytics.trackView( 'Trouver un préservatif - Ajout - pop alerte' );
		}
		else {
			if( $scope.basedHtml.daySelected.L != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.L ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.L ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.L ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.L ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 0 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 0 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 0 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 0 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.M != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.M ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.M ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.M ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.M ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 1 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 1 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 1 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 1 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.Me != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.Me ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.Me ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.Me ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.Me ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 2 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 2 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 2 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 2 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.J != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.J ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.J ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.J ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.J ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 3 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 3 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 3 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 3 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.V != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.V ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.V ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.V ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.V ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 4 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 4 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 4 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 4 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.S != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.S ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.S ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.S ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.S ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 5 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 5 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 5 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 5 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			if( $scope.basedHtml.daySelected.D != 'no' ) {
				var h1 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.D ].horaire1;
				var h2 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.D ].horaire2;
				var h3 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.D ].horaire3;
				var h4 = $scope.basedHtml.timeValues[ $scope.basedHtml.daySelected.D ].horaire4;
				
				if( h1 )
					$scope.lieu.horaires[ 6 ].horaire1 = h1.getHours() + 'h' + (( h1.getMinutes() < 10 ) ? '0' + h1.getMinutes() : h1.getMinutes());
				
				if( h2 )
					$scope.lieu.horaires[ 6 ].horaire2 = h2.getHours() + 'h' + (( h2.getMinutes() < 10 ) ? '0' + h2.getMinutes() : h2.getMinutes());
				
				if( h3 )
					$scope.lieu.horaires[ 6 ].horaire3 = h3.getHours() + 'h' + (( h3.getMinutes() < 10 ) ? '0' + h3.getMinutes() : h3.getMinutes());
				
				if( h4 )
					$scope.lieu.horaires[ 6 ].horaire4 = h4.getHours() + 'h' + (( h4.getMinutes() < 10 ) ? '0' + h4.getMinutes() : h4.getMinutes());
			}
			
			localStorageService.set( 'newPoi', $scope.lieu );
			$state.go( 'app.add_poi_validation' );
		}
	};
	
	// Click on back button
	$rootScope.goBackCustom = function() {
		$ionicHistory.goBack();
	};
	
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Trouver un préservatif - Ajout' );
});
tupModule.controller( 'addPoiConfirmationContoller', function( $scope ) {
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Trouver un préservatif - Ajout - Merci' );
});
tupModule.controller( 'addPoiValidationContoller', function( $scope, $rootScope, localStorageService, $ionicHistory, newPreservatifPlaceFactory, $state, globalFunctionService ) {
	$scope.lieu = localStorageService.get( 'newPoi' );
	if( $scope.lieu.horaires ) {
		$scope.horaires = globalFunctionService.transformHorairesPoi( $scope.lieu.horaires );
	}
	
	$scope.changeLieu = function() {
		$ionicHistory.goBack();
	}
	
	$scope.submitLieu = function() {
		var newLieu = $scope.lieu;
		
		newLieu.horaires.forEach( function( item, key ) {
			newLieu.horaires[ key ].horaire1 = item.horaire1.replace( ':', 'h' );
			newLieu.horaires[ key ].horaire2 = item.horaire2.replace( ':', 'h' );
			newLieu.horaires[ key ].horaire3 = item.horaire3.replace( ':', 'h' );
			newLieu.horaires[ key ].horaire4 = item.horaire4.replace( ':', 'h' );
		});
		
		newPreservatifPlaceFactory.setLieu( newLieu )
		.then( function( response ) {
			if( response.status == 200 ) {
				$ionicHistory.nextViewOptions({
					disableAnimate: true,
					disableBack: true
				});
				$state.go( 'app.add_poi_confirmation' );
			}
			else
				globalFunctionService.notificationAlert( "Une erreur est survenue lors de l'ajout du lieu : " + response.message, false, 'Erreur', 'OK'  );
		}, function( err ) {
			globalFunctionService.notificationAlert( "Une erreur est survenue lors de l'ajout du lieu : " + err.message, false, 'Erreur', 'OK'  );
		});
	};
	
	// Click on back button
	$rootScope.goBackCustom = function() {
		$ionicHistory.goBack();
	};
	
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Trouver un préservatif - Ajout - Confirmation' );
});
tupModule.controller( 'agendaContoller', function( $scope, $stateParams, localStorageService, eventsFactory, $ionicScrollDelegate ) {
	eventsFactory.getEvents().then( function( response ) {
		$scope.events = localStorageService.get( 'events' );

		var id = $stateParams.id;
		if( id ) {
			ionic.DomUtil.ready(function() {
				var itemTop = angular.element( document.querySelector( '#' + id ) )[0].offsetTop;
				if( itemTop ) {
					$ionicScrollDelegate.scrollTo( 0, itemTop, false );
				}
			});
		}
	});
	
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Agenda' );
});
tupModule.controller( 'agirApresUnRisqueController', function( $scope ) {
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Agir après un risque' );
});
tupModule.controller( 'aproposController', function( $rootScope,$scope,localStorageService,$ionicScrollDelegate, $timeout, $location,$state,$ionicPopup ) {
  $scope.show_vie_privee  = false;
  $scope.show_cgu   = false;
   $scope.show_cookie   = false;

  $scope.toggleMyCookie = function(){
   $scope.show_cookie = !$scope.show_cookie;
   $timeout( function() {
    $ionicScrollDelegate.resize();
    if(!$scope.show_cookie) {
     $timeout( function() {
      var handle = $ionicScrollDelegate.$getByHandle('content');
      handle.anchorScroll();
      $ionicScrollDelegate.scrollBottom();
     }, 250);
    }
   }, 250);   
  }

if(self.location.href.indexOf("cookies")>0){
  $scope.toggleMyCookie();
  $timeout( function() {
    $ionicScrollDelegate.resize();
     $timeout( function() {
      $ionicScrollDelegate.scrollBottom();
     }, 250);
  }, 250);   
}

$scope.cookieOk = function(){
  localStorageService.set("isCookie",true)
$rootScope.isCookie=localStorageService.get("isCookie");
var alertPopup = $ionicPopup.alert({
     title: 'Paramétrage des cookies',
     template: 'Votre choix a été validé'
   });

   alertPopup.then(function(res) {
     
   });
}
$scope.cookieKo = function(){
localStorageService.set("isCookie",false)
$rootScope.isCookie=localStorageService.get("isCookie");
var alertPopup = $ionicPopup.alert({
     title: 'Paramétrage des cookies',
     template: 'Votre choix a été validé'
   });

   alertPopup.then(function(res) {
     
   });
}
  $scope.toggleViePrivee = function(){
   $scope.show_vie_privee = !$scope.show_vie_privee;
   $timeout( function() {
    $ionicScrollDelegate.resize();
    if(!$scope.show_vie_privee) {
     $timeout( function() {
      var handle = $ionicScrollDelegate.$getByHandle('content');
      handle.anchorScroll();
      $ionicScrollDelegate.scrollBottom();
     }, 250);
    }
   }, 250);
  }
  
  $scope.toggleCgu = function(){
   $scope.show_cgu = !$scope.show_cgu;
   $timeout( function() {
    $ionicScrollDelegate.resize();
    if(!$scope.show_cgu) {
     $timeout( function() {
      var handle = $ionicScrollDelegate.$getByHandle('content');
      handle.anchorScroll();
      $ionicScrollDelegate.scrollBottom();
     }, 250);
    }
   }, 250);
  }
});
tupModule.controller( 'poiContoller', function( $scope, $stateParams, globalFunctionService, $state, $rootScope, $ionicViewSwitcher, $ionicScrollDelegate, $timeout, $ionicHistory ) {
	$scope.type 		= $stateParams.type;
	$scope.onScrolling 	= false;
	var id = $stateParams.id;
	if( id && !isNaN( id ) ) {
		$timeout( function() {
			$scope.item = globalFunctionService.getPlaceFromId( id, $scope.type );
			$scope.current_timewalk = $scope.item.timewalk;
			
            if( $scope.type =='preservatif' ) {
                if( $scope.item.horaires ) {
                    $scope.horaires = globalFunctionService.transformHorairesPoi( $scope.item.horaires );
                }
            }
            else {
                if( $scope.item.type_depistage && $scope.item.type_depistage.length > 0 ) {
                    $scope.horaires = globalFunctionService.transformHorairesPoiDepistage( $scope.item.type_depistage );
                }
            }
			
			if( typeof analytics !== 'undefined' ) {
				if( $scope.type =='preservatif' )
					analytics.trackView( 'Trouver un préservatif - Fiche - ' + $scope.item.nom );
				else
					analytics.trackView( 'Trouver un lieu de dépistage - Fiche - ' + $scope.item.nom );
			}
		}, 0);
	}
	
	// Click for itineraire
	$scope.goItineraire = function() {
		launchnavigator.navigate(
			[ $scope.item.latitude, $scope.item.longitude ],
			null,
			function(){ ; },
			function(error){
				globalFunctionService.notificationAlert( "Une erreur est survenue lors du lancement de l'itinéraire", false, 'Erreur', 'OK'  );
			}
		);
	}
	
	$scope.scrollOnPage = function() {
		$scope.$apply( function() {
			if( $ionicScrollDelegate.getScrollPosition().top !== 0 )
				$scope.onScrolling = true;
			else
				$scope.onScrolling = false;
		});
	}
	
	$scope.trackEvents = function( action, label, value ) {
		var cat = '';
		if( $scope.type =='preservatif' )
			cat = 'TUP';
		else
			cat = 'TULD';

		if( !label && !value )
			$rootScope.gaTrackEvent( cat, action );
		else if( label && !value )
			$rootScope.gaTrackEvent( cat, action, label );
		else if( label && value )
			$rootScope.gaTrackEvent( cat, action, label, value );
	}
	
	// Click on back button
	$rootScope.goBackCustom = function() {
        $ionicHistory.goBack();
		//$ionicViewSwitcher.nextDirection( 'back' );
		//$state.go( 'app.map_id', { type: $scope.type, id: id, reload: true } );
	};
});
tupModule.controller( 'fichesContoller', function( $scope, $rootScope, $stateParams, fichesFactory, $ionicLoading, $timeout, $ionicHistory, $state, $ionicViewSwitcher ) {
	$ionicLoading.show({
		template: 'Chargement...'
	});
	
	$scope.display 				= 'cat';
	$scope.currentCat 			= false;
	$scope.currentCatIndex 		= false;
	$scope.currentItemIndex 	= false;
	$scope.isOnSlide			= false;
	
	$scope.obj = {
		heightTitle : 20,
		categories : [
			{
				key 		: 'preservatif_masculin_et_feminin',
				tupicon 	: '<i class="tupicon-condomfemme"></i><i class="tupicon-condom"></i>',
				title 		: 'Préservatif féminin et masculin',
				fiches		: []
			},{
				key 		: 'depistage',
				tupicon 	: '<i class="tupicon-plus"></i>',
				title 		: 'Dépistage',
				fiches		: []
			},{
				key 		: 'contraception_et_vaccins',
				tupicon 	: '<i class="tupicon-contraception"></i>',
				title 		: 'Contraception d\'urgence',
				fiches		: []
			},{
				key 		: 'tpe_traitement_post_exposition',
				tupicon 	: '<i class="tupicon-tpe"></i>',
				title 		: 'TPE - Traitement post exposition',
				fiches		: []
			},{
				key 		: 'ist_infections_sexuellement_transmissibles',
				tupicon 	: '<i class="tupicon-ist"></i>',
				title 		: 'IST - Infections sexuellement transmissibles',
				fiches		: []
			},
		]
	};
	
	fichesFactory.getFiches().then( function( response ) {
		$scope.obj.categories[ 0 ].fiches = response[ 'preservatif_masculin_et_feminin' ];
		$scope.obj.categories[ 1 ].fiches = response[ 'depistage' ];
		$scope.obj.categories[ 2 ].fiches = response[ 'contraception_et_vaccins' ];
		$scope.obj.categories[ 3 ].fiches = response[ 'tpe_traitement_post_exposition' ];
		$scope.obj.categories[ 4 ].fiches = response[ 'ist_infections_sexuellement_transmissibles' ];

		if( $stateParams.id && $stateParams.cat ) {
			var fiche_id 	= $stateParams.id;
			var cat_id 		= $stateParams.cat;
			var fiche_key	= false;
			
			$scope.obj.categories[ ( cat_id - 1 ) ].fiches.forEach( function( item, key ) {
				if( item.id == fiche_id )
					fiche_key = key;
			});
			
			if( fiche_key !== false ) {
				$scope.display 			= 'item';
				$scope.currentCatIndex 	= cat_id;
				$scope.currentCat		= $scope.obj.categories[ ( cat_id - 1 ) ].key;
				$scope.currentItemIndex	= fiche_key;
				$scope.isOnSlide		= true;
				$scope.obj.heightTitle 	= 10;
			}
		}
		
		$ionicLoading.hide();
	});
	
	$scope.setCat = function( cat, index ) {
		$scope.isOnSlide 	= false;
		$stateParams.id 	= false;
		if( $scope.display == 'item' ) {
			$scope.display = 'cat';
		}else if( cat == $scope.currentCat ) {
			$scope.currentCat 		= false;
			$scope.currentCatIndex	= false;
			$scope.obj.heightTitle 	= 20;
		} else {
			$scope.currentCat 		= cat;
			$scope.currentCatIndex	= index;
			$scope.obj.heightTitle 	= 10;
		}
	}

	$scope.setItem = function( index, e ) {
		$scope.display 			= 'item';
		$scope.currentItemIndex = index;
		
		$timeout( function() {
			$scope.isOnSlide = true;
		}, 500);
		
		if( typeof analytics !== 'undefined' )
			analytics.trackView( 'Fiches pratiques - ' + $scope.obj.categories[ ( $scope.currentCatIndex - 1 ) ].fiches[ index ].nom );
	};
	
	$scope.onCatSwipe = function( e ) {
		if( e.gesture.direction == 'left' && $scope.currentCatIndex != $scope.obj.categories.length ) {
			$scope.currentItemIndex = 0;
			$scope.currentCatIndex += 1;
			
			$rootScope.gaTrackEvent( 'FP', 'categorie', 'swipe' );
		} else if( e.gesture.direction == 'right' && $scope.currentCatIndex != 1 ) {
			$scope.currentItemIndex = 0;
			$scope.currentCatIndex -= 1;
			
			$rootScope.gaTrackEvent( 'FP', 'categorie', 'swipe' );
		}
	}
	
	$scope.onItemSwipe = function( e ) {
		if( e.gesture.direction == 'left' ) {
			if( ( $scope.currentItemIndex + 1 ) != $scope.obj.categories[ ( $scope.currentCatIndex - 1 ) ].fiches.length ) {
				$scope.currentItemIndex += 1;
				
				$rootScope.gaTrackEvent( 'FP', 'fiche', 'swipe' );
			} else {
				$scope.onCatSwipe( e );
			}
		} else if( e.gesture.direction == 'right' ) {
			if( $scope.currentItemIndex != 0 ) {
				$scope.currentItemIndex -= 1;
				
				$rootScope.gaTrackEvent( 'FP', 'fiche', 'swipe' );
			} else {
				$scope.onCatSwipe( e );
			}
		}
	}
	
	$rootScope.goBackCustom = function() {
		if( $stateParams.id && $scope.display == 'item' && ( $state.current.name == 'app.fiches_id' || $state.current.name == 'app.fiches' ) ) {
			$ionicHistory.goBack();
			$scope.display 			= 'cat';
			$scope.currentCatIndex 	= false;
			$scope.currentCat		= false;
			$scope.currentItemIndex	= false;
			$scope.isOnSlide		= false;
			$scope.obj.heightTitle 	= 20;
		} else if( ( $state.current.name == 'app.fiches_id' || $state.current.name == 'app.fiches' ) && $scope.obj.heightTitle != 20 ) {
			$timeout( function() {
				$scope.setCat( $scope.currentCat );
			}, 0);
		} else {
			$ionicViewSwitcher.nextDirection( 'back' )
			$state.go( 'app.home' );
		}
	};
	
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Fiches pratiques - Menu' );
});
tupModule.controller( 'globalController', function( $rootScope, localStorageService,$ionicSideMenuDelegate, $ionicGesture, $ionicModal, $ionicHistory, $ionicLoading, $state, $ionicPlatform ) {
	// Logo TUP to header
	$rootScope.pageTitle 	= '<img src="./img/navLogo.svg" height="40" width="45" />';
	
	$rootScope.isAndroid	= ionic.Platform.isAndroid();
	$rootScope.isIOS		= ionic.Platform.isIOS();
	$rootScope.isCookie=localStorageService.get("isCookie");
	// Pixel ratio (-1 because interface based on iPhone4 wich have pixel ratio = 2)
	if($rootScope.isAndroid) {
		if( window.devicePixelRatio < 2 ) {
			$rootScope.pixelRatio 	= window.devicePixelRatio;	
		} else {
			$rootScope.pixelRatio	= 1;	
		}
	} else if($rootScope.isIOS) {
		$rootScope.pixelRatio = 1;
	} else {
		$rootScope.pixelRatio 	= window.devicePixelRatio - 1;
	}
	
	if( $rootScope.pixelRatio == 0)
	{
		 $rootScope.pixelRatio = 1.5;
	}
	
	if( ionic.Platform.isIOS() && parseFloat( ionic.Platform.version() ) >= 7.0) {
		//$rootScope.bodyClass = 'borderDropBox';
	}

	// Menu
	$ionicModal.fromTemplateUrl( 'templates/menu.html', function( modal ) {
		// Link Modal to Menu
		modal.modalEl = modal.el.querySelector( '.menu' );
		modal.$el.addClass('sidemenu-modal');

		// Handle swiping the backdrop to close
		var gesture = $ionicGesture.on( 'swipe', $rootScope.onSideMenuSwipe, modal.$el );
		$rootScope.$on( '$destroy', function() {
			$ionicGesture.off( gesture, 'swipe', $rootScope.onSideMenuSwipe );
		});

		// Modify some of the modal's methods
		modal._hide = modal.hide;
		modal._show = modal.show;
		modal.show 	= function() {
			if( typeof analytics !== 'undefined' )
				analytics.trackView( 'Menu' );
			
			document.body.classList.add( 'menu-open' );
			$rootScope.isMenuOpener = true;
			this._show();
		};
		modal.hide = function() {
			this._hide();
			$rootScope.isMenuOpener = false;
			document.body.classList.remove( 'menu-open' );
		};
		modal.toggle = function() {
			if( this.isShown() )
				this.hide();
			else
				this.show();
		};

		$rootScope.sideMenu = modal;
	}, {
		scope: $rootScope
	});
	
	// On swipe on right of App
	$rootScope.onSideMenuSwipe = function( $event ) {
		if( $state.current.name != 'app.fiches' && $state.current.name != 'app.fiches_id' ) {
			if( $event.gesture.direction == 'left' ) {
				var startedFrom = $event.gesture.startEvent.center;
				if( startedFrom.pageX >=  window.innerWidth - ( 30 * $rootScope.pixelRatio ) ) {
					$event.preventDefault();
					$event.stopPropagation();
					$rootScope.sideMenu.show();
					$rootScope.isMenuOpener = true;
				}
			} else if( $event.gesture.direction == 'right' ) {
				if( $rootScope.sideMenu.isShown() ) {
					$rootScope.sideMenu.hide();
					$rootScope.isMenuOpener = false;
				}
			}
		}
	}
	
	// Open link on device browser
	$rootScope.openExternalLink = function( link ) {
		window.open( link , '_system');
	};
	
	// Click on back btn
	$rootScope.goBack = function() {
		if( !$rootScope.goBackCustom )
			$ionicHistory.goBack();
		else
			$rootScope.goBackCustom();
	};
	
	// Open loading
	$rootScope.openLoading = function( template ) {
		if( !template )
			template = 'Chargement...';
		
		$ionicLoading.show({
			template: template
		});
	};
	
	// Close loading
	$rootScope.closeLoading = function() {
		$ionicLoading.hide();
	};
	
	// GA send trackEvent
	$rootScope.gaTrackEvent = function( cat, action, label, value ) {
		if( typeof analytics !== 'undefined' ) {
			if( !label && !value )
				analytics.trackEvent( cat, action );
			else if( label && !value )
				analytics.trackEvent( cat, action, label );
			if( label && value )
				analytics.trackEvent( cat, action, label, value );
		}
	};
	
	// Override Android back button
	$ionicPlatform.registerBackButtonAction( function( e ) {
		if( $state.current.name != 'app.home' ) {
			$rootScope.goBack();
			e.preventDefault();
			return false;
		} else {
			ionic.Platform.exitApp();
		}
	}, 101);
});
tupModule.controller( 'homeContoller', function( $scope,$ionicPopup,$rootScope, localStorageService, $ionicSlideBoxDelegate, eventsEnAvantFactory, $timeout ) {
	$scope.mySlideBoxHome = $ionicSlideBoxDelegate.$getByHandle( 'homepage' );
	$scope.tailleFooter="200px";
	// Load event from previous call (from SplashScreen)
	$scope.events_en_avant = localStorageService.get( 'events_en_avant' );
	if($rootScope.isCookie){
		$scope.tailleFooter="75px";
	}
	// If no cache, load items
	if( !$scope.events_en_avant ) {
		eventsEnAvantFactory.getEventsAvant().then( function( response ) {
			$scope.events_en_avant = response;
			$timeout( function() {
				$scope.mySlideBoxHome.update();
				$timeout( function() {
					$scope.mySlideBoxHome.enableSlide(0);
				}, 50);
			}, 10);
		});
	}
	
$scope.cookieOk = function(){
	localStorageService.set("isCookie",true)
$rootScope.isCookie=localStorageService.get("isCookie");
var alertPopup = $ionicPopup.alert({
     title: 'Paramétrage des cookies',
     template: 'Votre choix a été validé'
   });

   alertPopup.then(function(res) {
     $scope.tailleFooter="75px";
		eventsEnAvantFactory.getEventsAvant().then( function( response ) {
			$scope.events_en_avant = response;
			$timeout( function() {
				$scope.mySlideBoxHome.update();
				$timeout( function() {
					$scope.mySlideBoxHome.enableSlide(0);
				}, 50);
			}, 10);
		});
	});
}
$scope.cookieKo = function(){
localStorageService.set("isCookie",false)
$rootScope.isCookie=localStorageService.get("isCookie");
var alertPopup = $ionicPopup.alert({
     title: 'Paramétrage des cookies',
     template: 'Votre choix a été validé'
   });

   alertPopup.then(function(res) {
     
   });
}

	$scope.slideHasChanged = function( index ) {
		if( typeof $scope.events_en_avant[ index ] !== 'undefined' )
			$rootScope.gaTrackEvent( 'home', 'notification', 'view', $scope.events_en_avant[ index ].id )
	}
	
	if( typeof analytics !== 'undefined' )
		analytics.trackView( 'Home' );
});
tupModule.controller( 'mapContoller', function( $scope, $rootScope, $stateParams, localStorageService, uiGmapGoogleMapApi, $interval, globalFunctionService, placesFactory, $ionicSlideBoxDelegate, $timeout, $state, $ionicViewSwitcher, $ionicScrollDelegate ) {
	// Display loader
	$rootScope.openLoading();
	
	// Text on small footer
	$scope.txtFooter				= 'Chargement...';
	
	// Define type of map -> preservatif | depistage
	$scope.type 					= $stateParams.type;
	
	// Do you want to be localize ?
	$scope.enableGps	 			= true; //localStorageService.get( 'isGps' );
	
	// Interval to get current pos
	$scope.intWatchPosition 		= false;
	
	// Selected POI
	$scope.markerSelectedTmpKey		= false;
	
	// For btn
	$scope.gpsIsActive				= true;
	
	// Footer slidebox
	$scope.mySlideBox 				= $ionicSlideBoxDelegate.$getByHandle( 'googlemap' );
	
	// Map Object, include all
	$scope.iMap = {
		objects	: [],
		events	: {
			idle : function( e ) {
				// Load markers
				if( isMapLoad && e.zoom >= maxMapZoom && !$rootScope.isMenuOpener ) {
					$timeout( function() {
						$scope.iMap.markers.displayPlaces = false;
						getPlaces();
                        // $timeout( function() {
                        //     saveMapOnCache( e );
                        // }, 0);
				        localStorageService.set( 'myLat2', e.center.lat() );
				        localStorageService.set( 'myLng2', e.center.lng() );
					}, 0);
				}
			},
			click: function(e) {
				mapClosePoiSlider();
			},
			zoom_changed: function(e) {
				localStorageService.set( 'myLat2', e.center.lat() );
				localStorageService.set( 'myLng2', e.center.lng() );
                // $timeout( function() {
                //     saveMapOnCache( e );
                // }, 0);
				if( e.zoom >= maxMapZoom )
					$scope.txtFooter = 'Chargement...';
				else
					$scope.txtFooter = 'Afficher les résultats';
				
				clearWatchPosition();
				mapClosePoiSlider();
			},
			dragstart: function(e) {
				if( e.zoom >= maxMapZoom )
					$scope.txtFooter = 'Chargement...';
		
				clearWatchPosition();
				mapClosePoiSlider();
			},
			dragend: function(e) {
				localStorageService.set( 'myLat2', e.center.lat() );
				localStorageService.set( 'myLng2', e.center.lng() );
                // $timeout( function() {
                //     saveMapOnCache( e );
                // }, 0);
			}
		},
		mapOptions: {
			disableDefaultUI: true,
			minZoom: 5,
			styles: [
				{
					featureType: "poi",
					stylers: [{ visibility: "off" }]
				},{
					featureType: "transit.station",
					stylers: [{ visibility: "off" }]
				}
			]
		}
	}

	// Ask to watch GPS
	$scope.askToGps = function() {
		if( !$scope.gpsIsActive ) {
			$timeout( function() {
				$scope.gpsIsActive = true;
			}, 0);
			watchPosition( true );
		} else {
			$timeout( function() {
				$scope.gpsIsActive = false;
			}, 0);
			clearWatchPosition();
		}
	}
	
	// Slide on footer
	$scope.changeSizeMarker = function( index ) {
		changeSizeMarker( index );
	}
	
	// Click for itineraire
	$scope.goItineraire = function() {
		var displayPlaces = localStorageService.get( 'displayPlaces' + $scope.type );
		var item = displayPlaces[ $scope.markerSelectedTmpKey ];

		launchnavigator.navigate(
			[ item.latitude, item.longitude ],
			null,
			function(){ ; },
			function(error){
				globalFunctionService.notificationAlert( "Une erreur est survenue lors du lancement de l'itinéraire", false, 'Erreur', 'OK'  );
			}
		);
	}
	
	// Display / Hide SearchBox
	$scope.search = {
		text		: '',
		isEnable	: false
	}
	$scope.toggleSearchBox = function() {
		if( !$scope.search.isEnable )
			$scope.trackEvents( 'opensearch' );
		
		$scope.search.isEnable = !$scope.search.isEnable;
	}
	$scope.closeSearchBox = function() {
		if( $scope.search.text == '' ) {
			$scope.search.isEnable = !$scope.search.isEnable;
			$scope.trackEvents( 'searchcancel' );
		} else
			$scope.search.text = '';
	}
	$scope.searchAddress = function() {
		clearWatchPosition();
		$scope.markerSelectedTmpKey = false;
		$scope.txtFooter = 'Recherche...';
		
		$rootScope.openLoading( 'Recherche...' );
		
		$scope.trackEvents( 'searchgo' );
	
		geocoder.geocode( { "address": $scope.search.text }, function( results, status ) {
			if( status == google.maps.GeocoderStatus.OK && results.length > 0 ) {
				var location = results[0].geometry.location;
				if( location.lat() && location.lng() ) {
					$scope.toggleSearchBox();
					changeCenterMap( location.lat(), location.lng(), false, true );
                    // globalFunctionService.notificationAlert( "saveMapOnCache", false, 'Debug', 'OK'  );
                    // saveMapOnCache( $scope.iMap );
				} else {
					$rootScope.closeLoading();
					globalFunctionService.notificationAlert( "Une erreur est survenue lors de la recherche", false, 'Erreur de recherche', 'OK'  );
				}
			} else {
				$rootScope.closeLoading();
				globalFunctionService.notificationAlert( "Une erreur est survenue lors de la recherche", false, 'Erreur de recherche', 'OK'  );
			}
		});
		
		$rootScope.closeLoading();
	}
	
	// Show list of POI
	$scope.displayResult = function() {
		if( $scope.iMap.markers.displayPlaces ) {
			$scope.isMapListActivate = true;
			
			$scope.trackEvents( 'results' );
			
			if( typeof analytics !== 'undefined' ) {
				if( $scope.type =='preservatif' )
					analytics.trackView( 'Trouver un préservatif - Liste des lieux' );
				else
					analytics.trackView( 'Trouver un lieu de dépistage - Liste des lieux' );
			}
		}
	};
	
	// Go to Interface of new POI
	$scope.addDistribution = function() {
		var myLat = localStorageService.get( 'myLat' );
		var myLng = localStorageService.get( 'myLng' );
		
		if( myLat && myLng && $scope.enableGps ) {
			$rootScope.openLoading();
			
			var latlng = { lat: parseFloat( myLat ), lng: parseFloat( myLng ) };
			geocoder.geocode( { 'location': latlng }, function( results, status ) {
				if ( status === google.maps.GeocoderStatus.OK ) {
					if ( results[0] ) {
						var addr 			= results[0].address_components;
						var street_number 	= _.find( addr, function( obj ){ return obj.types[0] == 'street_number';});
						var route 			= _.find( addr, function( obj ){ return obj.types[0] == 'route';});
						var locality 		= _.find( addr, function( obj ){ return obj.types[0] == 'locality';});
						var postal_code 	= _.find( addr, function( obj ){ return obj.types[0] == 'postal_code';});

						var addrCache 		= ( ( street_number ) ? street_number.short_name : '' ) + ' ' + ( ( route ) ? route.short_name : '' ) + '||' + ( ( locality ) ? locality.short_name : '' ) + '||' + ( ( postal_code ) ? postal_code.short_name : '' );
						
						localStorageService.set( 'addrCache', addrCache );
						
						$rootScope.closeLoading();
						$state.go( 'app.add_poi' );
					} else {
						$rootScope.closeLoading();
						$state.go( 'app.add_poi' );
					}
				} else {
					$rootScope.closeLoading();
					$state.go( 'app.add_poi' );
				}
			});
		} else {
			$state.go( 'app.add_poi' );
		}
	}
	
	$scope.trackEvents = function( action, label, value ) {
		var cat = '';
		if( $scope.type =='preservatif' )
			cat = 'TUP';
		else
			cat = 'TULD';

		if( !label && !value )
			$rootScope.gaTrackEvent( cat, action );
		else if( label && !value )
			$rootScope.gaTrackEvent( cat, action, label );
		else if( label && value )
			$rootScope.gaTrackEvent( cat, action, label, value );
	}
	
	// Click on back button
	$rootScope.goBackCustom = function() {
		$scope.trackEvents( 'retour' );
		
		if( $scope.isMapListActivate ) {
			var itemTop = angular.element(document.querySelector('#liste_poi') )[0].offsetTop;
			if( itemTop ) {
				$ionicScrollDelegate.scrollTo( 0, itemTop, false );
			}

			$timeout(function() {
				$scope.isMapListActivate = false;
			}, 0);
			
		} else {
			$ionicViewSwitcher.nextDirection( 'back' );
			$state.go( 'app.home' );
		}
	};

	// Do you return from POI's detail ?
	var poiId				= $stateParams.id || false;
	
	// Footer SlideBox
	var mySlideBox 			= $ionicSlideBoxDelegate.$getByHandle( 'googlemap' );
	
	// Get map from cache
	var myMap 				= localStorageService.get( 'map' + $scope.type );
	
	// Is map loaded
	var isMapLoad 			= false;
	
	// Interval instance to check map loading on loading
	var isMapLoadInterval	= false;
	
	// Search an address
	var geocoder = false;
	
	// Max zoom for refresh
	var maxMapZoom = 11;
	
	// Refresh User position and center of actual map
	var changeCenterMap = function( lat, lng, ignoreCenter, ignoreUser ) {
		$scope.$apply( function() {		
			if( !ignoreUser ) {
				setUserPosition();
				
				localStorageService.set( 'myLat', lat );
				localStorageService.set( 'myLng', lng );
			}

			if( !ignoreCenter ) {
                $scope.iMap.objects[ $scope.type ].center = { latitude : lat, longitude: lng };
                $timeout(function() {
					$scope.markerSelectedTmpKey = false;
					$scope.iMap.markers.displayPlaces = false;
                    getPlaces();
                }, 100);
            }
		});
	}

	// Save map on cache
	var saveMapOnCache = function( e ) {
		var objSave = {
			zoom: e.zoom,
			center: {
				latitude: e.center[ Object.keys( e.center )[0] ],
				longitude: e.center[ Object.keys( e.center )[1] ]
			},
			bounds: e.bounds
		};

		localStorageService.set( 'map' + $scope.type, objSave );
	}
	
	// Check if all params was instanciate to call correctly WS
	var checkMapBeforeGetPlaces = function() {
		try {
			var myMap = $scope.iMap.objects[ $scope.type ];
			if( myMap.bounds && ( $scope.iMap.markers.position[0].latitude || $scope.iMap.objects[ $scope.type ].center.latitude ) && ( $scope.iMap.markers.position[0].longitude || $scope.iMap.objects[ $scope.type ].center.longitude ) ) {
				if( myMap.bounds.northeast && myMap.bounds.southwest ) {
					if( myMap.bounds.northeast.latitude && myMap.bounds.southwest.longitude && myMap.bounds.southwest.latitude && myMap.bounds.northeast.longitude ) {
						return true;
					} else { return false; }
				} else { return false; }
			} else { return false; }
		} catch( e ) { return false; }
	}
	
	// Load places from WS
	var getPlaces = function() {
		var myLat 			= $scope.iMap.markers.position[0].latitude || $scope.iMap.objects[ $scope.type ].center.latitude;
		var myLng 			= $scope.iMap.markers.position[0].longitude || $scope.iMap.objects[ $scope.type ].center.longitude;
		try {
			placesFactory.getPlaces( $scope.type, $scope.iMap.objects[ $scope.type ].bounds.northeast.latitude, $scope.iMap.objects[ $scope.type ].bounds.southwest.longitude, $scope.iMap.objects[ $scope.type ].bounds.southwest.latitude, $scope.iMap.objects[ $scope.type ].bounds.northeast.longitude, myLat, myLng ).then( function( response ) {
				// Get places
				var places = response.places;

				// Add POI to map
				$scope.iMap.markers.places[ $scope.type ] = [];
				places.forEach( function( item, key ) {
					$scope.iMap.markers.places[ $scope.type ].push({
						id				: item.id,
						latitude		: item.latitude,
						longitude		: item.longitude,
						title			: item.nom,
						icon			: item.icon
					});
				});

				var displayPlaces = response.displayPlaces;
				if( displayPlaces.length == 0 ) {
					$timeout( function() {
						//globalFunctionService.notificationAlert( "Aucune place", false, 'Debug', 'OK'  );
						$scope.markerSelectedTmpKey = false;
						$scope.iMap.markers.displayPlaces = false;
						$scope.txtFooter = 'Aucun résultat';
						$rootScope.closeLoading();
					}, 100);
				} else {
					$scope.iMap.markers.displayPlaces = [];
					displayPlaces.forEach( function( item, key ) {
						$scope.iMap.markers.displayPlaces.push( item );
					});
					
					$scope.txtFooter = 'Afficher les résultats';
					var currentPoi = ( poiId ) ? globalFunctionService.getPlaceFromId( poiId, $scope.type, 'key' ) || 0 : 0;
					changeSizeMarker( currentPoi );
					
					$timeout( function() {
						$scope.mySlideBox.update();
						
						$timeout( function() {
							$scope.mySlideBox.update();
							if( !poiId )
								$scope.mySlideBox.slide( 0 );
							else
								$scope.mySlideBox.slide( currentPoi );
							
							$scope.mySlideBox.update();
							poiId = false;
						}, 10);
					}, 10);
					
					$rootScope.closeLoading();
				}
			});
		} catch( e ) { $rootScope.closeLoading(); }
	}
	
	// Change size of Markers
	var changeSizeMarker = function( key, isTrackEvent ) {
		if( isTrackEvent )
			$scope.trackEvents( 'swipe' );
		
		if( $scope.markerSelectedTmpKey || $scope.markerSelectedTmpKey === 0 ) {
			var icon = $scope.iMap.markers.places[ $scope.type ][ $scope.markerSelectedTmpKey ].icon.url;
			icon = icon.replace( '_selected', '' );
			$scope.iMap.markers.places[ $scope.type ][ $scope.markerSelectedTmpKey ].icon.url			= icon;
			$scope.iMap.markers.places[ $scope.type ][ $scope.markerSelectedTmpKey ].icon.scaledSize 	= new google.maps.Size( 32 * $rootScope.pixelRatio, 36.35 * $rootScope.pixelRatio );
			$scope.iMap.markers.places[ $scope.type ][ $scope.markerSelectedTmpKey ].icon.anchor 		= new google.maps.Point( 16 * $rootScope.pixelRatio, 13.63125 * $rootScope.pixelRatio );
		}

		if( key !== false && key != -1 ) {
			var displayPlaces 	= localStorageService.get( 'displayPlaces' + $scope.type );
			var findItem = _.findIndex( $scope.iMap.markers.places[ $scope.type ], { 'id': displayPlaces[ key ].id } );
			
			if( $scope.iMap.markers.places[ $scope.type ][ findItem ] ) {
				var icon = $scope.iMap.markers.places[ $scope.type ][ findItem ].icon.url;
				//icon = icon.replace( '.svg', '_selected.svg' );
				icon = icon.replace( '.png', '_selected.png' );
				$scope.iMap.markers.places[ $scope.type ][ findItem ].icon.url			= icon;
				$scope.iMap.markers.places[ $scope.type ][ findItem ].icon.scaledSize 	= new google.maps.Size( 32 * $rootScope.pixelRatio, 36.35 * $rootScope.pixelRatio );
				$scope.iMap.markers.places[ $scope.type ][ findItem ].icon.anchor 		= new google.maps.Point( 16 * $rootScope.pixelRatio, 36.35 * $rootScope.pixelRatio );
				$scope.markerSelectedTmpKey 											= findItem;
			}
		} else {
			$scope.markerSelectedTmpKey = false;
		}
	}
	
	// Close big footer
	var mapClosePoiSlider = function() {
		changeSizeMarker( false );
		$timeout( function() {
			$scope.isMarkerSelected = false;
		}, 0);
	}
	
	// Watch GPS
	var watchPosition = function( force ) {
		if( navigator.geolocation ) {
			var options = { maximumAge: 10000, timeout: 10000, enableHighAccuracy: false };
			var ignoreCenter = ( force ) ? false : localStorageService.get( 'isFirstInitMap' );
			$scope.intWatchPosition = navigator.geolocation.watchPosition( function( pos ) {
				$timeout( function() {
					$scope.gpsIsActive = true;
				}, 0);
            
                if( !ignoreCenter )
                    localStorageService.set( 'isFirstInitMap', true );
        
				changeCenterMap( pos.coords.latitude, pos.coords.longitude, ignoreCenter, false );
				ignoreCenter = true;
			}, function( err ) {
                clearWatchPosition();
        
				switch(err.code)
				{
					case 1:
						globalFunctionService.notificationAlert( "Vous ne partagez pas votre position", false, 'Erreur de localisation', 'OK'  );
						break;
					case 2:
						try {
							if( typeof cordova.plugins.settings.openSetting != undefined && navigator.notification ) {
								navigator.notification.confirm("Veuillez activer la localisation pour l'application TUP.", function( buttonIndex ) {
									switch( buttonIndex ) {
										case 1:
											cordova.plugins.settings.openSetting( 'manage_applications' );
											break;
										default:
											break;
									}
								}, 'Localisation', [ 'Activer', 'Fermer' ]);
							}
						} 
						catch( e ) { 
							console.log( 'Il vous manque le module openSetting ou vous êtes sur un navigateur' ); 
						}
						break;
					default:
						try {
							if( typeof cordova.plugins.settings.openSetting != undefined && navigator.notification ) {
								navigator.notification.confirm("Nous n'arrivons pas à détecter votre position. Veuillez activer la localisation.", function( buttonIndex ) {
									switch( buttonIndex ) {
										case 1:
											cordova.plugins.settings.openSetting( 'location_source' );
											break;
										default:
											break;
									}
								}, 'Localisation', [ 'Activer', 'Fermer' ]);
							}
						} 
						catch( e ) { 
							console.log( 'Il vous manque le module openSetting ou vous êtes sur un navigateur' ); 
						}
						break;
				}
			}, options );
		} else {
			globalFunctionService.notificationAlert( "Vous n'avez pas le service de géolocalisation", false, 'Erreur', 'OK'  );
			clearWatchPosition();
			
		}
	}
	// Stop Watching GPS
	var clearWatchPosition = function() {
		if( $scope.intWatchPosition ) {
			$timeout( function() {
				$scope.gpsIsActive = false;
			}, 0);

			navigator.geolocation.clearWatch( $scope.intWatchPosition );
			$scope.intWatchPosition	= false;
		}
	}
	
	var setUserPosition = function() {
		$scope.iMap.markers.position[0].latitude	= localStorageService.get( 'myLat' );
		$scope.iMap.markers.position[0].longitude	= localStorageService.get( 'myLng' );
	}
	
	// Wait for load API - First function of page
	uiGmapGoogleMapApi.then( function( maps ) {
		// Enable geocoder
		geocoder = new google.maps.Geocoder();
		
		// If actual map is on cache, load it
		// if( myMap ) {
		// 	$scope.iMap.objects[ $scope.type ] = myMap;
			
        if(localStorageService.get( 'myLat2' ) && localStorageService.get( 'myLng2' )){
            $scope.iMap.objects[ $scope.type ] = {
				center: { // Paris
					latitude	: localStorageService.get( 'myLat2' ),
					longitude	: localStorageService.get( 'myLng2' )
				},
				zoom: 14,
				bounds: {}
			};
		// Else created one with default value
		} else {
			$scope.iMap.objects[ $scope.type ] = {
				center: { // Paris
					latitude	: 48.856614,
					longitude	: 2.352222
				},
				zoom: 14,
				bounds: {}
			};
		}
		
		// Set markers
		$scope.iMap.markers = {
			// User position
			position : [{
				id			: 0,
				latitude	: localStorageService.get( 'myLat' ),
				longitude	: localStorageService.get( 'myLng' ),
				title		: 'myPosition',
				optimized	: false,
				icon		: {
					//url			: 'img/map/svg_normal/localisation.svg',
					url			: 'img/map/svg_normal/localisation.png',
					scaledSize	: new google.maps.Size( 24 * $rootScope.pixelRatio, 27.2625 * $rootScope.pixelRatio ),
					origin		: new google.maps.Point( 0, 0 ),
					anchor		: new google.maps.Point( 12 * $rootScope.pixelRatio, 13.63125 * $rootScope.pixelRatio )
				},
				options		: {
					zIndex		: google.maps.Marker.MAX_ZINDEX + 1
				}
			}],
			
			// Display places
			places: {},
			displayPlaces: {},
			events:{
				click: function( e, eventname, marker ) {
					var key = globalFunctionService.getPlaceFromId( marker.id, $scope.type, 'key' );
					changeSizeMarker( key );
					$scope.isMarkerSelected = true;
					$scope.mySlideBox.slide( key );
				}
			} 
		}
		$scope.iMap.markers.places[ $scope.type ] = $scope.iMap.markers.displayPlaces[ $scope.type ] = [];
		
		// Ask for GPS
		watchPosition();
		
		// POI was loaded by 'idle' events of map
		isMapLoadInterval = $interval( function() {
			if( !checkMapBeforeGetPlaces() ) {
				if( $scope.isGood == 5 ) {
					$rootScope.closeLoading();
					globalFunctionService.notificationAlert( "Une erreur serveur est apparue. Il se peut que tous les POI ne s'affichent pas correctement.", false, 'Erreur de chargement', 'OK'  );
				}
			} else {
				$interval.cancel( isMapLoadInterval );
				isMapLoadInterval = false;
				getPlaces();
				
				isMapLoad = true;
			}
			$scope.isGood += 1;
		}, 500, 5, false );
    });
	
	if( typeof analytics !== 'undefined' ) {
		if( $scope.type =='preservatif' )
			analytics.trackView( 'Trouver un préservatif - MAP' );
		else
			analytics.trackView( 'Trouver un lieu de dépistage - MAP' );
	}
});
tupModule.controller( 'signalPoiContoller', function( $scope, $rootScope, $stateParams, globalFunctionService, signalPlaceFactory, $ionicViewSwitcher, $state, $ionicHistory, $ionicLoading ) {
	$scope.type		= $stateParams.type;
	
	
	var id = $stateParams.id;
	if( id && !isNaN( id ) ) {
		$scope.place = globalFunctionService.getPlaceFromId( id, $scope.type );
	}
	
	$scope.items = [{
		name	: "Adresse",
		icon	: "poi",
		active	: false,
		ga		: 'adresse'
	}, {
		name	: "Téléphone",
		icon	: "phone",
		active	: false,
		ga		: 'telephone'
	}, {
		name	: "Horaires",
		icon	: "clock",
		active	: false,
		ga		: 'horaires'
	}, {
		name	: "Ce lieu n'existe plus",
		icon	: "barriere",
		active	: false,
		ga		: 'noexiste'
	}];
	
	$scope.note = '';
	
	$scope.clicked = function( item ) {
		var findItem = _.findIndex( $scope.items, { 'name': item.name } );
		$scope.items[ findItem ].active = !$scope.items[ findItem ].active;
	}
	
	$scope.submitPoi = function() {
		$ionicLoading.show({
			template: 'Envoi en cours...'
		});
		var data = {
			id 			: id,
			type		: {
				1	: $scope.items[3].active,//$scope.items[0].active,
				2	: $scope.items[0].active,//$scope.items[1].active,
				3	: $scope.items[1].active,//$scope.items[2].active,
				4	: $scope.items[2].active,//$scope.items[3].active
			},
			commentaire	: $scope.note
		};
		signalPlaceFactory.signalPlace( data, $scope.type )
		.then( function( response ) {
			if( response.status == 200 ) {
				$ionicHistory.nextViewOptions({
					disableAnimate: true
				});
				$ionicLoading.hide();
				$state.go( 'app.signal_poi_confirm', { type: $scope.type } );
			} else
				globalFunctionService.notificationAlert( "Une erreur est survenue lors du signalement du lieu : " + response.message, false, 'Erreur', 'OK'  );
		}, function( err ) {
			globalFunctionService.notificationAlert( "Une erreur est survenue lors de l'ajout du lieu : " + err.message, false, 'Erreur', 'OK'  );
		});
	}
	
	$scope.trackEvents = function( action, label ) {
		if( $scope.type =='preservatif' )
			$rootScope.gaTrackEvent( 'TUP', action, label );
		else
			$rootScope.gaTrackEvent( 'TULD', action, label );
	}
	
	if( typeof analytics !== 'undefined' ) {
		if( $scope.type =='preservatif' )
			analytics.trackView( 'Trouver un préservatif - Signaler' );
		else
			analytics.trackView( 'Trouver un lieu de dépistage - Signaler' );
	}
    
	// Click on back button
	$rootScope.goBackCustom = function() {
        $ionicHistory.goBack();
		// $ionicViewSwitcher.nextDirection( 'back' );
		// $state.go( 'app.poi', { type: $scope.type, id: id } );
	};
});
tupModule.controller( 'signalPoiConfirmContoller', function( $scope, $rootScope, $stateParams ) {
	$scope.type	= $stateParams.type;
	
	$scope.trackEvents = function( action, label ) {
		if( $scope.type =='preservatif' )
			$rootScope.gaTrackEvent( 'TUP', action, label );
		else
			$rootScope.gaTrackEvent( 'TULD', action, label );
	}
	
	if( typeof analytics !== 'undefined' ) {
		if( $scope.type =='preservatif' )
			analytics.trackView( 'Trouver un préservatif - Signaler - Merci' );
		else
			analytics.trackView( 'Trouver un lieu de dépistage - Signaler - Merci' );
	}
});
tupModule.controller( 'splashContoller', function( eventsEnAvantFactory ) {
	// Load eventEnAvant before Home view
	eventsEnAvantFactory.getEventsAvant().then( function( response ) {
		;
	});
});
tupModule.service('globalFunctionService', function( localStorageService ) {
	this.getBaseWsUrl = function() {
		//return 'http://tup-testing.sooyoos.com/api/';
        return 'http://tupdata.fr/api/';
	};
	
	this.getPlaceFromId = function( id, type, needVal ) {
		try {
			var displayPlaces 	= localStorageService.get( 'displayPlaces' + type );
			var returnItem 		= false;

			var findItem = _.findIndex( displayPlaces, { 'id': parseInt( id ) } );
			if( needVal == 'key' )
				returnItem = findItem;
			else
				returnItem = displayPlaces[ findItem ];

			return returnItem;
		} catch( e ) { console.log(e); }
	};
	
	this.notificationAlert = function( msg, dismissed, title, btn ) {
		if( navigator.notification ) {
			navigator.notification.alert(
				msg,
				dismissed,
				title,
				btn
			);
		} else {
			alert( msg );
		}
	};
    
    this.transformHorairesPoi = function( obj ) {
		var objReturn 	= [];
		var beginKey 	= false;
		
		var getTitle = function( obj ) {
			if( ( !obj.horaire1 || obj.horaire1 =='' ) || ( !obj.horaire2 || obj.horaire2 == '' ) )
				return false;
			
			return ( obj.ferme != '0' ) ? 'Fermé' : ( obj.horaire1 + ' - ' + obj.horaire2 + ( ( obj.horaire3 && obj.horaire4 ) ? ' / ' + obj.horaire3 + ' - ' + obj.horaire4 : ''  ) );
		}
		
		obj.forEach( function( item, key ) {
			var titleItem = getTitle( item );
			if( titleItem ) {
				if( obj[ key + 1 ] ) {
					if( item.horaire1 == obj[ key + 1 ].horaire1 && item.horaire2 == obj[ key + 1 ].horaire2 ) {
						if( beginKey === false )
							beginKey = key;
					} else {
						if( beginKey === false ) {
							objReturn.push( _.capitalize( item.jour ) + ' : ' + getTitle( item ) );
						} else {
							objReturn.push( 'Du ' + _.capitalize( obj[ beginKey ].jour ) + ' au ' + _.capitalize( item.jour ) + ' : ' + getTitle( item ) );
							beginKey = false;
						}
					}
				} else {
					if( beginKey === false ) {
						objReturn.push( _.capitalize( item.jour ) + ' : ' + getTitle( item ) );
					} else {
						objReturn.push( 'Du ' + _.capitalize( obj[ beginKey ].jour ) + ' au ' + _.capitalize( item.jour ) + ' : ' + getTitle( item ) );
					}
				}
			}
		});

		return ( objReturn.length != 0 ) ? objReturn : false;
	}
    
	this.transformHorairesPoiDepistage = function( obj ) {
        /*******ON SCREEN => *******/
        
        /*
        - CATEGORIE (DEPISTAGE VIH)
            - RDV / No RDV
                - HoraireList
         */
        function HoraireList(_isRDV) {
            this.isRDV = _isRDV;
            this.title = this.isRDV ? '<div class="margin-top">Sans RDV :</div>' : 'Sur RDV anonyme :';
            this.displayHoraires = [];
        }
        
        function Categorie(typeDepistage) {
            this.typeCategorie = typeDepistage;
            this.horairesRDV = new HoraireList(true);
            this.horairesNoRDV = new HoraireList(false);
            
            this.Display = function() {
                
                var displayContent = [];
                
                displayContent.push('<b>' + this.typeCategorie + '</b><br />');
                
                //displayContent.push(this.horairesRDV.title);
                var first=true;
                this.horairesRDV.displayHoraires.forEach(function(element) {
                    if(first){
                        displayContent.push(this.horairesRDV.title);
                    
                    if(this.info_avec_rendez_vous)    
                        displayContent.push("<div class=\"margin\">"+this.info_avec_rendez_vous + "</div>");
                        first=false; 
                    }
                     displayContent.push(element);
                }, this);
                first=true;
                //displayContent.push(this.horairesNoRDV.title);
                this.horairesNoRDV.displayHoraires.forEach(function(element) {
                    if(first){
                        displayContent.push(this.horairesNoRDV.title);
                        
                        if(this.info_sans_rendez_vous)
                            displayContent.push("<div class=\"margin\">"+this.info_sans_rendez_vous + "</div>");
                        
                        first=false;
                    }
                     displayContent.push(element);
                }, this);
                
                return displayContent;
            }
            
            this.getHoraireRDVText = function ( obj ) {               
                var data = [];
                var hasHoraire_rdv_matin = !(obj.horaire_rdv1 == undefined || obj.horaire_rdv1 =='')  && !(obj.horaire_rdv2 == undefined || obj.horaire_rdv2 =='');
                var hasHoraire_rdv_aprem = !(obj.horaire_rdv3 == undefined || obj.horaire_rdv3 =='') && !(obj.horaire_rdv4 == undefined || obj.horaire_rdv4 ==''); 
                
                var hasHoraire_all_day = !(obj.horaire_rdv1 == undefined || obj.horaire_rdv1 =='') && !(obj.horaire_rdv4 == undefined || obj.horaire_rdv4 =='');
                
                
                
                if(!hasHoraire_rdv_matin && !hasHoraire_rdv_aprem && !hasHoraire_all_day)
                    return false;
                
                if(hasHoraire_rdv_matin || hasHoraire_rdv_aprem || hasHoraire_all_day) {
                    if(hasHoraire_rdv_matin) {
                        data.push( obj.horaire_rdv1 + ' - ' + obj.horaire_rdv2 + ( ( obj.horaire_rdv3 && obj.horaire_rdv4 ) ? ' / ' + obj.horaire_rdv3 + ' - ' + obj.horaire_rdv4 : ''  ) ) ;
                    }
                    else if(hasHoraire_all_day) {
                        data.push( obj.horaire_rdv1 + ' - ' + obj.horaire_rdv4) ;
                    }
                    else {
                        data.push( obj.horaire_rdv3 + ' - ' + obj.horaire_rdv4  );
                    }
                    
                }
                return data;
            }
            this.getHoraireNoRDVText = function ( obj ) {               
                var data = [];
                var hasHoraire_sans_rdv_matin = !(obj.horaire1 == undefined || obj.horaire1 =='') && !(obj.horaire2 == undefined || obj.horaire2 =='');
                var hasHoraire_sans_rdv_aprem = !(obj.horaire3 == undefined || obj.horaire3 =='') && !(obj.horaire4 == undefined || obj.horaire4 ==''); 
                var hasHoraire_sans_rdv_all_day = !(obj.horaire1 == undefined || obj.horaire1 =='') && !(obj.horaire4 == undefined || obj.horaire4 =='');
                
                if(!hasHoraire_sans_rdv_matin && !hasHoraire_sans_rdv_aprem && !hasHoraire_sans_rdv_all_day )
                    return;
                
                if(hasHoraire_sans_rdv_matin || hasHoraire_sans_rdv_aprem || hasHoraire_sans_rdv_all_day) {
                    if(hasHoraire_sans_rdv_matin) {
                        data.push(obj.horaire1 + ' - ' + obj.horaire2 + ( ( obj.horaire3 && obj.horaire4 ) ? ' / ' + obj.horaire3 + ' - ' + obj.horaire4 : '' ));
                    }
                    else if(hasHoraire_sans_rdv_all_day) {
                        data.push( obj.horaire1 + ' - ' + obj.horaire4) ;
                    }
                    else {
                        data.push( obj.horaire3 + ' - ' + obj.horaire4  );
                    }
                }
                return data;
            } 
        }
        
        /*** MAIN PROGRAM ***/
        var categories = [];
        var beginKey = false;
        var beginKey2 = false;
        var firstCategorie = true;
        obj.forEach( function( item, key ) {
            beginKey = false;
            beginKey2 = false;
            var currentCategorie = new Categorie(item.type);
            if(item.info_avec_rendez_vous)
                currentCategorie.info_avec_rendez_vous = item.info_avec_rendez_vous
            if(item.info_sans_rendez_vous)
                currentCategorie.info_sans_rendez_vous = item.info_sans_rendez_vous
            item.horaire.forEach(function(horaire, subKey) {                
                if(!horaire.ferme) {
                        if( item.horaire[ subKey + 1 ] ) {
                            
                            if( item.horaire[ subKey ].horaire_rdv1 == item.horaire[ subKey + 1 ].horaire_rdv1 && 
                                item.horaire[ subKey ].horaire_rdv2 == item.horaire[ subKey + 1 ].horaire_rdv2 && 
                                item.horaire[ subKey ].horaire_rdv3 == item.horaire[ subKey + 1 ].horaire_rdv3 && 
                                item.horaire[ subKey ].horaire_rdv4 == item.horaire[ subKey + 1 ].horaire_rdv4 
                                ) {
                                if( beginKey === false )
                                    beginKey = subKey;
                            } 
                            else {
                                var horairesTxt = currentCategorie.getHoraireRDVText( horaire );
                                if( beginKey === false ) {                                    
                                    if(horairesTxt != false && horairesTxt != undefined)
                                        currentCategorie.horairesRDV.displayHoraires.push(_.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt);
                                } 
                                else {
                                    if(horairesTxt != false && horairesTxt != undefined)
                                        currentCategorie.horairesRDV.displayHoraires.push('Du ' + _.capitalize( item.horaire[ beginKey ].jour ) + ' au ' + _.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt);
                                    beginKey = false;
                                }
                            }
                            
                            if(  item.horaire[ subKey ].horaire1 == item.horaire[ key + 1 ].horaire1 && 
                                 item.horaire[ subKey ].horaire2 == item.horaire[ key + 1 ].horaire2 && 
                                 item.horaire[ subKey ].horaire3 == item.horaire[ key + 1 ].horaire3 && 
                                 item.horaire[ subKey ].horaire4 == item.horaire[ key + 1 ].horaire4
                                ) {
                                if( beginKey2 === false )
                                    beginKey2 = subKey;
                            } 
                            else {
                                var horairesTxt2 = currentCategorie.getHoraireNoRDVText( horaire );
                                if( beginKey2 === false ) {    
                                    if(horairesTxt2 != false && horairesTxt2 != undefined)                                  
                                        currentCategorie.horairesNoRDV.displayHoraires.push(_.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt2);
                                }
                                else {  
                                    if(horairesTxt2 != false && horairesTxt2 != undefined)
                                        currentCategorie.horairesNoRDV.displayHoraires.push('Du ' + _.capitalize( item.horaire[ beginKey2 ].jour ) + ' au ' + _.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt2);
                                    beginKey2 = false;
                                }
                            }
                        } 
                        else {
                            
                                var horairesTxt = currentCategorie.getHoraireRDVText( horaire );
                                var horairesTxt2 = currentCategorie.getHoraireNoRDVText( horaire );
                                
                            if( beginKey === false ) {
                                if(horairesTxt != false && horairesTxt != undefined)
                                    currentCategorie.horairesRDV.displayHoraires.push(_.capitalize( item.horaire[ subKey ].jour ) + ' : ' +horairesTxt);
                            } 
                            else {
                                if(horairesTxt != false && horairesTxt != undefined)
                                    currentCategorie.horairesRDV.displayHoraires.push('Du ' + _.capitalize( item.horaire[ beginKey ].jour ) + ' au ' + _.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt);
                            }
                            if( beginKey2 === false ) {
                                if(horairesTxt2 != false && horairesTxt2 != undefined)
                                    currentCategorie.horairesNoRDV.displayHoraires.push(_.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt2);
                            } 
                            else {
                                if(horairesTxt2 != false && horairesTxt2 != undefined)
                                    currentCategorie.horairesNoRDV.displayHoraires.push('Du ' + _.capitalize( item.horaire[ beginKey2 ].jour ) + ' au ' + _.capitalize( item.horaire[ subKey ].jour ) + ' : ' + horairesTxt2);
                            }
                        } 
                }
            }, this);
            
            currentCategorie.Display().forEach(function(element) {
                categories.push(element);
            }, this);
            categories.push('<br/>');
        });
        
        return categories;
	}
});
tupModule.factory( 'newPreservatifPlaceFactory', function( $http, globalFunctionService ) {
	return {
		setLieu: function( data ) {
			return $http
				.post( globalFunctionService.getBaseWsUrl() + 'add-lieu-preservatif', data, {
					headers : {
						'Content-Type' : 'application/x-www-form-urlencoded; charset=UTF-8'
					}})
				.then( function( response ) {
						return response;
					}, function( err ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la sauvegarde des données. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
						return false;
					}
				);
		}
	};
});
tupModule.factory( 'eventsFactory', function( $http, localStorageService, globalFunctionService ) {
	return {
		getEvents: function() {
			return $http
				.get( globalFunctionService.getBaseWsUrl() + 'evenements' )
				.then( function( response ) {
						var events = response.data;
						localStorageService.set( 'events', events );
						return events;
					}, function( response ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la récupération des informations. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
						return false;
					}
				);
		}
	};
});
tupModule.factory( 'eventsEnAvantFactory', function( $http, localStorageService, globalFunctionService ) {
	return {
		getEventsAvant: function() {
			return $http
				.get( globalFunctionService.getBaseWsUrl() + 'evenements-fiches-en-avant' )
				.then( function( response ) {
						var eventsAvant = response.data;
						
						eventsAvant.forEach( function( item, key ) {
							if( item.categorie ) {
								eventsAvant[ key ].type 	= 'bubbles_left';
								eventsAvant[ key ].title 	= 'Le saviez-vous ?';
								
								var cat = 0;
								if( item.categorie.indexOf( 'masculin' ) !== -1 )
									cat = 1;
								else if( item.categorie.indexOf( 'pistage' ) !== -1 )
									cat = 2;
								else if( item.categorie.indexOf( 'vaccin' ) !== -1 )
									cat = 3;
								else if( item.categorie.indexOf( 'exposition' ) !== -1 )
									cat = 4;
								else if( item.categorie.indexOf( 'sexuellement' ) !== -1 )
									cat = 5;
								
								eventsAvant[ key ].url 		= 'app.fiches_id({id: ' + eventsAvant[ key ].id + ', cat: ' + cat + '})';
							} else {
								var dateEvent 	= new Date( item.date_debut.split('+')[0] );
								var dateNow 	= new Date;

								//dateEvent 	= dateEvent.getFullYear().toString() + dateEvent.getMonth().toString() + dateEvent.getDate().toString();
								//dateNow 	= dateNow.getFullYear().toString() + dateNow.getMonth().toString() + dateNow.getDate().toString();
								
								if( dateEvent <= dateNow ) {
									eventsAvant[ key ].type 	= 'clock';
									eventsAvant[ key ].title 	= 'En ce moment';
								} else {
									eventsAvant[ key ].type 	= 'clock';
									eventsAvant[ key ].title 	= 'A venir';
								}

								eventsAvant[ key ].url 	= 'app.agenda_id({id: "item_' + eventsAvant[ key ].id + '"})';
							}
						});
						
						localStorageService.set( 'events_en_avant', eventsAvant );
						return eventsAvant;
					}, function( response ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la récupération des informations. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
						return false;
					}
				);
		}
	};
});
tupModule.factory( 'fichesFactory', function( $http, Slug, globalFunctionService ) {
	return {
		getFiches: function() {
			return $http
				.get( globalFunctionService.getBaseWsUrl() + 'fiches' )
				.then( function( response ) {
						var fiches = response.data;
						
						var fichesParse = {};
						
						// Create final object
						fiches.forEach( function( item, key ) {
							var catless = Slug.slugify( item.categorie );
							
							if( !fichesParse[ catless ] )
								fichesParse[ catless ] = [];
							
							fichesParse[ catless ].push( item );
						});
						
						// Order item by position
						fichesParse[ 'contraception_et_vaccins' ].sort( function( a, b ) { return a.position - b.position } );
						fichesParse[ 'depistage' ].sort( function( a, b ) { return a.position - b.position } );
						fichesParse[ 'ist_infections_sexuellement_transmissibles' ].sort( function( a, b ) { return a.position - b.position } );
						fichesParse[ 'preservatif_masculin_et_feminin' ].sort( function( a, b ) { return a.position - b.position } );
						fichesParse[ 'tpe_traitement_post_exposition' ].sort( function( a, b ) { return a.position - b.position } );
						
						return fichesParse;
					}, function( response ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la récupération des informations. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
						return false;
					}
				);
		}
	};
});
tupModule.factory( 'placesFactory', function( $rootScope, $http, localStorageService, Slug, globalFunctionService ) {
	return {
		getPlaces: function( type, lat1, lng1, lat2, lng2, pos1, pos2 ) {
			return $http
				.get( globalFunctionService.getBaseWsUrl() + type + '/' + lat1 + '/' + lng1 + '/' + lat2 + '/' + lng2 + '/' + pos1 + '/' + pos2 )
				.then(
					function( response ) {
						try {
							var tmp = response.data.replace(/(\r\n|\n|\r)/gm,"");
							var tmpBugClient = tmp.split( '</table></font>' );
							var places = JSON.parse( tmpBugClient[ tmpBugClient.length - 1] );
						} catch( e ) {
							var places = response.data;
						}
						
						var goodPlaces = [];
						places.forEach( function( item, key ) {
							var typeless = Slug.slugify( item.type );
							var folderIco = ( item.operation ) ? 'svg_operation' : 'svg_normal';
							
							if( item.operation && !item.id && item.operation.type ) {
								// Rebind for operation speciale from distributeur
								typeless 					= Slug.slugify( item.operation.type );
								places[ key ].id 			= item.operation.id;
								places[ key ].latitude		= item.operation.latitude;
								places[ key ].longitude		= item.operation.longitude;
								places[ key ].nom			= item.operation.nom;
								places[ key ].adresse1		= item.operation.adresse1;
								places[ key ].adresse2		= item.operation.adresse2;
								places[ key ].codePostal	= item.operation.codePostal;
								places[ key ].ville			= item.operation.ville;
								places[ key ].telephone		= item.operation.telephone;
							}
							
                            places[ key ].informations	= item.informations;
							places[ key ].typeless 	= typeless;
							places[ key ].folderIco = folderIco;
							//places[ key ].icon 		= 'img/map/' + typeless + '.png';
							places[ key ].icon 		= {
								//url			: 'img/map/' + folderIco + '/' + typeless + '.svg',
								url			: 'img/map/' + folderIco + '/' + typeless + '.png',
								scaledSize	: new google.maps.Size( 32 * $rootScope.pixelRatio, 36.35 * $rootScope.pixelRatio ),
								origin		: new google.maps.Point( 0, 0 ),
								anchor		: new google.maps.Point( 16 * $rootScope.pixelRatio, 13.63125 * $rootScope.pixelRatio )
							};
							places[ key ].distance	= item.distance * 1000;
							
							var timewalk	= places[ key ].distance / 60;
							if( timewalk < 60 ) {
								places[ key ].timewalk = Math.floor( timewalk ) + " min";
							}
							else {
								places[ key ].timewalk = Math.floor( timewalk / 60 ) + "h";
								if( Math.floor( timewalk % 60) > 0 ) {
									places[ key ].timewalk = places[ key ].timewalk + Math.floor( timewalk % 60 );
								}
							}

							if( item.etat ) {
								if( places[ key ].id && item.etat.indexOf( 'Valid' ) !== -1 ) {
									goodPlaces.push( places[ key ] );
								}
							}
						});

						goodPlaces.sort( function( a, b ) { return a.distance - b.distance } );

						// Define displayPlaces
						var displayPlaces = [];
						goodPlaces.forEach( function( item, key ) {
							if( item.latitude < lat1 && item.latitude > lat2 && item.longitude > lng1 && item.longitude < lng2 ) {
								displayPlaces.push( item );
							}
						});
						
						localStorageService.set( 'displayPlaces' + type, displayPlaces );
						
						return { places : goodPlaces, displayPlaces : displayPlaces }
					}, function( response ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la récupération des informations. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
					}
				);
		}
	};
});
tupModule.factory( 'signalPlaceFactory', function( $http, globalFunctionService ) {
	return {
		signalPlace: function( data, type ) {			
			return $http
				.post( globalFunctionService.getBaseWsUrl() + 'post-comment-' + type, data, {
					headers : {
						'Content-Type' : 'application/x-www-form-urlencoded; charset=UTF-8'
					}})
				.then( function( response ) {
						return response;
					},
					function( err ) {
						globalFunctionService.notificationAlert( "Une erreur est survenue lors de la sauvegarde des données. Veuillez vérifier votre connexion Internet", false, 'Erreur de connexion', 'OK'  );
						return false;
					}
				);
		}
	};
});